import os
import time
import logging
import requests
import re
from datetime import datetime
from dotenv import load_dotenv

load_dotenv()

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
LOG_FILE_TO_WATCH = "trader.log"
MAX_SILENCE_MINUTES = 15
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã—Ö –ª–æ–≥–æ–≤
entry_context_side = None  # –•—Ä–∞–Ω–∏—Ç 'LONG' –∏–ª–∏ 'SHORT' –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –≤—Ö–æ–¥–∞
pnl_context_side = None  # –•—Ä–∞–Ω–∏—Ç 'LONG' –∏–ª–∏ 'SHORT' –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ —Å—É–º–º—ã PnL

# –†–∞–∑–¥–µ–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Long –∏ Short
saved_pnl_data = {}  # e.g., {'LONG': {'pnl': 10.5, 'emoji': '‚úÖ'}, 'SHORT': ...}
pnl_save_times = {}  # e.g., {'LONG': datetime_obj, 'SHORT': ...}

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')


def send_telegram_alert(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram."""
    if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID:
        logging.error("–¢–æ–∫–µ–Ω –∏–ª–∏ ID —á–∞—Ç–∞ –¥–ª—è Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ.")
        return

    full_message = f"{message}\n\n`--- GrishaLongAss ---`"
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": full_message,
        "parse_mode": "Markdown",
        "disable_web_page_preview": True
    }
    try:
        response = requests.post(url, json=payload, timeout=10)
        if response.status_code == 200:
            logging.info("–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –≤ Telegram —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.status_code} - {response.text}")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram: {e}")


def parse_and_notify(line):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.
    """
    global entry_context_side, pnl_context_side, saved_pnl_data, pnl_save_times

    # --- 1. –í—Ö–æ–¥ –≤ –ø–æ–∑–∏—Ü–∏—é (–®–∞–≥ 1: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω—ã) ---
    match = re.search(r"===== (LONG|SHORT) –ü–û–ó–ò–¶–ò–Ø –£–°–ü–ï–®–ù–û –û–¢–ö–†–´–¢–ê", line)
    if match:
        entry_context_side = match.group(1) # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å—Ç–æ—Ä–æ–Ω—É –∏ –∂–¥–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É —Å –¥–µ—Ç–∞–ª—è–º–∏
        return

    # --- 2. –í—Ö–æ–¥ –≤ –ø–æ–∑–∏—Ü–∏—é (–®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞) ---
    if entry_context_side and "–†–∞–∑–º–µ—Ä:" in line and "–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:" in line:
        try:
            side = entry_context_side
            size = re.search(r"–†–∞–∑–º–µ—Ä:\s*([\d.]+)", line).group(1)
            price = re.search(r"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:\s*([\d.]+)", line).group(1)
            sl_price = re.search(r"SL:\s*([\d.]+)", line).group(1)
            message = (f"üìà *–í—Ö–æ–¥ –≤ {side} –ø–æ–∑–∏—Ü–∏—é*\n\n"
                       f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: `{price}`\n"
                       f"–†–∞–∑–º–µ—Ä: `{size}`\n"
                       f"–°—Ç–æ–ø-–ª–æ—Å—Å: `{sl_price}`")
            send_telegram_alert(message)
        except AttributeError:
            send_telegram_alert(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–µ—Ç–∞–ª–µ–π –≤—Ö–æ–¥–∞:\n`{line}`")
        finally:
            entry_context_side = None # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        return
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—Ö–æ–¥–∞, –µ—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ –æ–∫–∞–∑–∞–ª–∞—Å—å –Ω–µ —Ç–æ–π, —á—Ç–æ –º—ã –∂–¥–∞–ª–∏
    elif entry_context_side and "–°–ò–ì–ù–ê–õ –ù–ê –í–•–û–î" not in line: # –ë–æ–ª–µ–µ –º—è–≥–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        entry_context_side = None


    # --- 3. –ü–æ–ª–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ (–®–∞–≥ 1: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ä–∞—Å—á–µ—Ç–∞) ---
    match = re.search(r"\*–§–ò–ù–ê–õ–¨–ù–´–ô –†–ê–°–ß–ï–¢ PNL \((LONG|SHORT)\) –ó–ê–í–ï–†–®–ï–ù\*", line)
    if match:
        pnl_context_side = match.group(1) # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å—Ç–æ—Ä–æ–Ω—É –∏ –∂–¥–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏—Ç–æ–≥–æ–≤—ã–º PnL
        return

    # --- 4. –ü–æ–ª–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ (–®–∞–≥ 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ PnL) ---
    if pnl_context_side and "–ò–¢–û–ì–û–í–´–ô PNL –ø–æ —Å–¥–µ–ª–∫–µ" in line:
        try:
            pnl = re.search(r"–ò–¢–û–ì–û–í–´–ô PNL –ø–æ —Å–¥–µ–ª–∫–µ:\s*([\d.-]+) USDT", line).group(1)
            pnl_float = float(pnl)
            emoji = "‚úÖ" if pnl_float > 0 else "‚ùå"

            side = pnl_context_side
            saved_pnl_data[side] = {"pnl": pnl_float, "emoji": emoji}
            pnl_save_times[side] = datetime.now()
            logging.info(f"–ó–∞–ø–æ–º–Ω–∏–ª PnL –¥–ª—è {side}: {pnl_float}. –û–∂–∏–¥–∞—é –ø—Ä–∏—á–∏–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è...")
        except (AttributeError, ValueError):
            send_telegram_alert(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ PNL —Å–¥–µ–ª–∫–∏:\n`{line}`")
        finally:
            pnl_context_side = None # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        return

    # --- 5. –ü–æ–ª–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ (–®–∞–≥ 3: –ü–æ–∏—Å–∫ –ø—Ä–∏—á–∏–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞) ---
    match = re.search(r"–°–±—Ä–æ—Å (LONG|SHORT) —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ –ø—Ä–∏—á–∏–Ω–µ: –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –ø—Ä–∏—á–∏–Ω–µ:\s*(.*)", line)
    if match:
        side, reason_text = match.groups()
        if side in saved_pnl_data:
            pnl_data = saved_pnl_data.pop(side) # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            pnl_save_times.pop(side, None)      # –£–¥–∞–ª—è–µ–º —Ç–∞–π–º–µ—Ä

            message = (f"{pnl_data['emoji']} *{side} —Å–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞: {pnl_data['pnl']:+.2f} USDT*\n\n"
                       f"–ü—Ä–∏—á–∏–Ω–∞: `{reason_text.strip()}`")
            send_telegram_alert(message)
        else:
            logging.warning(f"–ù–∞–π–¥–µ–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è {side}, –Ω–æ PnL –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –°—Ç—Ä–æ–∫–∞: {line}")
            message = (f"‚ö™Ô∏è *{side} —Å–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞*\n\n"
                       f"–ü—Ä–∏—á–∏–Ω–∞: `{reason_text.strip()}`\n\n"
                       f"_(PnL –Ω–µ –±—ã–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ—Ä–æ–∂ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–ª—Å—è)_")
            send_telegram_alert(message)
        return

    # --- 6. –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ ---
    match = re.search(r"PnL —á–∞—Å—Ç–∏—á–Ω–æ–π —Ñ–∏–∫—Å–∞—Ü–∏–∏ \((LONG|SHORT)\):\s*([\d.-]+) USDT.*–û—Å—Ç–∞–≤—à–∏–π—Å—è —Ä–∞–∑–º–µ—Ä:\s*([\d.]+)", line)
    if match:
        try:
            side, pnl, remaining_size = match.groups()
            message = (f"üéØ *–ß–∞—Å—Ç–∏—á–Ω—ã–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç ({side})*\n\n"
                       f"–ü—Ä–∏–±—ã–ª—å —á–∞—Å—Ç–∏: `{float(pnl):.2f} USDT`\n"
                       f"–û—Å—Ç–∞–ª–æ—Å—å –≤ –ø–æ–∑–∏—Ü–∏–∏: `{remaining_size}`")
            send_telegram_alert(message)
        except (AttributeError, ValueError):
            send_telegram_alert(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞:\n`{line}`")
        return

    # --- 7. –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∏ –≤–∞–∂–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ---
    lower_line = line.lower()
    if "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞" in lower_line:
        message = f"üö® *–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê* üö®\n\n`{line.strip()}`\n\n–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ!"
        send_telegram_alert(message)
        return

    if "—Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω" in lower_line:
        message = f"üü† *–í–ù–ò–ú–ê–ù–ò–ï: –†–ê–°–°–ò–ù–•–†–û–ù* üü†\n\n`{line.strip()}`\n\n–¢–æ—Ä–≥–æ–≤–µ—Ü –ø—ã—Ç–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ."
        send_telegram_alert(message)
        return

    # --- 8. –£—Å–ø–µ—à–Ω–æ–µ —Å–ø–∞—Å–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∞ ---
    match = re.search(r"!!! –ü–û–ó–ò–¶–ò–Ø (LONG|SHORT) –£–°–ü–ï–®–ù–û –°–ü–ê–°–ï–ù–ê –ò –ó–ê–©–ò–©–ï–ù–ê !!!", line)
    if match:
        side = match.group(1)
        message = (f"‚úÖ *–ü–æ–∑–∏—Ü–∏—è {side} —É—Å–ø–µ—à–Ω–æ —Å–ø–∞—Å–µ–Ω–∞!* ‚úÖ\n\n"
                   f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ, –¢–æ—Ä–≥–æ–≤–µ—Ü —É—Å—Ç–∞–Ω–æ–≤–∏–ª –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ –∑–∞—â–∏—Ç–Ω—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å.")
        send_telegram_alert(message)
        return


def watch():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å—Ç–æ—Ä–æ–∂–µ–≤–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞."""
    global saved_pnl_data, pnl_save_times
    logging.info(f"–°—Ç–æ—Ä–æ–∂–µ–≤–æ–π —Ç–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω. –°–ª–µ–∂—É –∑–∞ —Ñ–∞–π–ª–æ–º: {LOG_FILE_TO_WATCH}")
    send_telegram_alert("‚úÖ *–°—Ç–æ—Ä–æ–∂ –Ω–∞ –ø–æ—Å—Ç—É...* (UTA)")

    last_position = 0
    current_inode = None
    silence_alert_sent = False

    while True:
        try:
            # --- –õ–æ–≥–∏–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –¥–ª—è PnL –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã (–¥–ª—è –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω) ---
            now = datetime.now()
            sides_to_clear = []
            for side, save_time in list(pnl_save_times.items()):
                if (now - save_time).total_seconds() > 30:  # –¢–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥
                    logging.warning(f"PnL –¥–ª—è {side} –µ—Å—Ç—å, –Ω–æ –ø—Ä–∏—á–∏–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª—è—é PnL.")
                    if side in saved_pnl_data:
                        pnl_data = saved_pnl_data.pop(side)
                        message = (f"{pnl_data['emoji']} *{side} —Å–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞: {pnl_data['pnl']:+.2f} USDT*\n\n"
                                   f"_(–ü—Ä–∏—á–∏–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ª–æ–≥–∞—Ö)_")
                        send_telegram_alert(message)
                    sides_to_clear.append(side)

            for side in sides_to_clear:
                pnl_save_times.pop(side, None)

            # --- –õ–æ–≥–∏–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ---
            if not os.path.exists(LOG_FILE_TO_WATCH):
                if current_inode is not None:
                    logging.warning(f"–§–∞–π–ª {LOG_FILE_TO_WATCH} –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –û–∂–∏–¥–∞—é –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è.")
                    current_inode = None
                time.sleep(10)
                continue

            try:
                new_inode = os.stat(LOG_FILE_TO_WATCH).st_ino
                if current_inode is None:
                    current_inode = new_inode
                    with open(LOG_FILE_TO_WATCH, 'r', encoding='utf-8') as f:
                        f.seek(0, 2)
                        last_position = f.tell()
                elif new_inode != current_inode:
                    logging.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ä–æ—Ç–∞—Ü–∏—è –ª–æ–≥-—Ñ–∞–π–ª–∞. –ù–∞—á–∏–Ω–∞—é —á—Ç–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞.")
                    current_inode = new_inode
                    last_position = 0
            except FileNotFoundError:
                continue

            last_modified_time = os.path.getmtime(LOG_FILE_TO_WATCH)
            time_since_modified = (datetime.now() - datetime.fromtimestamp(last_modified_time)).total_seconds() / 60

            if time_since_modified > MAX_SILENCE_MINUTES:
                if not silence_alert_sent:
                    alert_message = (
                        f"üö® *–¢–†–ï–í–û–ì–ê! –¢–æ—Ä–≥–æ–≤–µ—Ü –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç!* üö®\n\n"
                        f"–§–∞–π–ª `{LOG_FILE_TO_WATCH}` –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª—Å—è –±–æ–ª–µ–µ *{MAX_SILENCE_MINUTES}* –º–∏–Ω—É—Ç.\n"
                        f"–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞!"
                    )
                    logging.error(alert_message)
                    send_telegram_alert(alert_message)
                    silence_alert_sent = True
            else:
                if silence_alert_sent:
                    logging.info("–¢–æ—Ä–≥–æ–≤–µ—Ü —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–µ–Ω. –°–±—Ä–∞—Å—ã–≤–∞—é —Ñ–ª–∞–≥ —Ç—Ä–µ–≤–æ–≥–∏.")
                    send_telegram_alert("‚úÖ *–¢–æ—Ä–≥–æ–≤–µ—Ü —Å–Ω–æ–≤–∞ –≤ —Å—Ç—Ä–æ—é!*")
                    silence_alert_sent = False

            with open(LOG_FILE_TO_WATCH, 'r', encoding='utf-8') as f:
                f.seek(last_position)
                new_lines = f.readlines()
                if new_lines:
                    for line in new_lines:
                        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –∏ "—à—É–º–Ω—ã–µ" —Å–æ–æ–±—â–µ–Ω–∏—è
                        if "–°—Ç–∞—Ç—É—Å: IDLE" in line or "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ " in line or "WS:" in line:
                            continue
                        parse_and_notify(line.strip())
                last_position = f.tell()

            time.sleep(5)

        except KeyboardInterrupt:
            logging.info("–°—Ç–æ—Ä–æ–∂–µ–≤–æ–π —Ç–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            send_telegram_alert("‚ö´Ô∏è *–°—Ç–æ—Ä–æ–∂–µ–≤–æ–π —Ç–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é*")
            break
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Å—Ç–æ—Ä–æ–∂–µ–≤–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞: {e}", exc_info=True)
            time.sleep(60)


if __name__ == '__main__':
    watch()